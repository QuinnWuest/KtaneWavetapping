using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using KMBombInfoExtension;
using UnityEngine;

public class scr_wavetapping : MonoBehaviour {
    public KMAudio BombAudio;
    public KMBombInfo BombInfo;
    public KMBombModule BombModule;
    public KMSelectable[] ModuleButtons;
    public KMSelectable ModuleSelect, SubmitButton;
    public Renderer[] ColorDisplays;
    public GameObject DisplayPixel;

    Color[,] patternColors;
    Dictionary<string, string[]> patterns = new Dictionary<string, string[]> {
        { "Red", new[] {} },
        { "Orange", new[] {} },
        { "Orange-Yellow", new[] { "XXXXXXXXXXXXXXOXOXOXXXXXXOXOXOXXXXXXOXOXOXXXXXXXXXXXXXXXXXOXOXOXXXXXXXXXXXXXXXXXOXOXOXXXXXXOXOXOXXXXXXOXOXOXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXOOOXXXXXXXXOXOXXOOOOOXOOOXXXXXXOXXXXXXOOOXOOOOOXXOXOXXXXXXXXOOOXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXOOXXOXXOOXXOXXXXXXXOXXXXXOOOXXXXXXXOXXXOXXXXOXOXXXOXOXXXXOXXXOXXXXXXXOOOXXXXXOXXXXXXXOXXOOXXOXXOOXXXXXXXXXXXX" } },
        { "Chartreuse", new[] { "XXXXXXXXXXXXOXOXXXXOOXXOXOXXXXOXXXOXXXXXXOOXXOXOXXXXXXXXOXXXXXXXOXXXOXOXXXXXXXOOXXXXOOOXXXXOOXXXXXXXOXOXOOOOOXXXXXXXXXXXX", "XXXXXXXXXXXXOOXXXXOXOXXXOXXXXOXOXXOOXXXXXXOXXXXXXXXOXOXXOXXXXXXXOXXXXXXXOXOXXXOOOXXXXOOXXXXXXXOOXXXXOOOOOXOXOXXXXXXXXXXXX" } },
        { "Lime", new[] { "XXXXXXXXXXXXXXOOOXOOOXXXXXXXXXXXXXXOXOOOOOOXXXOXXXXXXXXXXOOXOXOOOXXXOXXXXXXXXXXOXOOOOOOXXXXXXXXXXXXXXXOOOXOOOXXXXXXXXXXXX", "XXXXXXXXXXXXOOOXOOOXXXXXXXXXXXXXXXOOOOOOXOXXXXXXXXXXOXXXOOOXOXOOXXXXXXXXXXOXXXOOOOOOXOXXXXXXXXXXXXXXOOOXOOOXXXXXXXXXXXXXX" } },
        { "Green", new[] { "XXXXXXXXXXXXXXXXXXXOOXXXOOOOOXOXXXXOXXXOXOXXXXOXOOOOOXXXXOXOXOXOXXXXOOOOOXOXXXXOXOXXXOXXXXOXOOOOOXXXOOXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXOOXOOXXXXXXOOXOOXXXXOOXXOXXOOXXOOXXXXXOOXXXXOXXXOXXXXOOXXXXXOOXXOOXXOXXOOXXXXOOXOOXXXXXXOOXOOXXXXXXXXXXXXXX" } },
        { "Seafoam Green", new[] { "XXXXXXXXXXXXOOOXXXOOOXXOOOOOOOOOXXOOXXXXXOOXXXOXOXOXOXXXXOXXOXXOXXXXOXOXOXOXXXOOXXXXXOOXXOOOOOOOOOXXOOOXXXOOOXXXXXXXXXXXX", "XXXXXXXXXXXXOXOXXXOXOXXXOOOXXXOXXXOXOXXXOOOXXXXXXOXXOXXXXXXOOOXXXXXXOXXOXXXXXXOOOXXXOXOXXXOXXXOOOXXXOXOXXXOXOXXXXXXXXXXXX" } },
        { "Cyan-Green", new[] { "XXXXXXXXXXXXXXXXOXXXOXXXXXXXXXXXXXXXXXXXXXXXXXOXXXXXXXXXOXOXXXOXXXXXOXXXXXXXXXXXXXXOXOXXXXXXXXXXXXXXOXXXOXOXOXXXXXXXXXXXX", "XXXXXXXXXXXXOXXXOXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXOXXXXXOXXXOXOXXXXXXXXXOXXXXOXOXXXXXXXXXXXXXXXXXXOXOXOXXXOXXXXXXXXXXXX" } },
        { "Turquoise", new[] {} },
        { "Dark Blue", new[] {} },
        { "Indigo", new[] {} },
        { "Purple", new[] {} },
        { "Purple-Magenta", new[] {} },
        { "Magenta", new[] {} },
        { "Pink", new[] { "XXXXXXXXXXXXXXOXOXOXOXXXXOXOXOXOXXXXOXOXOXOXXXXOXOOOOOXXXXOXXXOXXXXOOOOOXOXXXXOXOXOXOXXXXOXOXOXOXXXXOXOXOXOXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXOOOXXXXXXXXOXOXXXXXXOXOOOXOXXXXOXXXXXOXXXOOXOOOXOOXXXXXXXXXXXXXXXOOOOOXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXOOOOOOOOOXXOXXOXXXXOXXOOOOOOOOOXXXXXOXOXXXXXOOOOOOOOOXXOXXXXOXXOXXOOOOOOOOOXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXOXOOOOOXOXXXOXXOXXOXXXOXXOOOXXOXXXXXXXXXXXXXOXOXOXOXOXXXOOXXXOOXXXXXOXXXOXXXXXXOXXXOXXXXXXOXXXOXXXXXXXXXXXXXX", "XXXXXXXXXXXXOOXOXOOOOXXOOXOXXXXXXXXXXXXOOOOXXXXXOXXXXXXXXXXOOOXXXXXXXXXXOXXXXXOOOOXXXXXXXXXXXXOXOOXXOOOOXOXOOXXXXXXXXXXXX", "XXXXXXXXXXXXOOOXXXOOOXXOXXXXXXXOXXOXOOOOOXOXXOXXXOXXXOXXOXXOXOXXOXXOXXOXOXXOXXOXOOOOOXOXXOXXXXXXXOXXOOOXXXOOOXXXXXXXXXXXX", "XXXXXXXXXXXXXXOXOXOXXXXXXOXOXOXXXXOOOXOXOOOXXXXXXXXXXXXXOOOXOXOOOXXXXXXXXXXXXXOOOXOXOOOXXXXOXOXOXXXXXXOXOXOXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXOOOOOXXXXXXOXXXOXXXXOXOOOOOOOXXOXXXXXOXOXXOXOOOOOXOXXOXOXXXXXOXXOOOOOOOXOXXXXOXXXOXXXXXXOOOOOXXXXXXXXXXXXXX", "XXXXXXXXXXXXXOXXOOOXXXXOXOXOXOXXXXOXOXXXOXXXXXXXXOXXXXXXOOOXOXOOOXXXXXXOXXXXXXXXOXXXOXOXXXXOXOXOXOXXXXOOOXXOXXXXXXXXXXXXX", "XXXXXXXXXXXXOXXXOXXXOXXOXOXOXOXOXXOXXOOOXXOXXXOXXOXXOXXXXOXOOOXOXXXXOXXOXXOXXXXXOXOXOXXXXXOOXOXOOXXXOXOXOXOXOXXXXXXXXXXXX", "XXXXXXXXXXXXOXOOXOOXOXXOXXOOOXXOXXOXXXOXXXOXXOXOXOXOXOXXXXOOOOOXXXXOXOXOXOXOXXOXXXOXXXOXXXXXOOOXXXXXOXOOXOOXOXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXOXXXXXXXXOXXXOXXXXXXXXOXXXXXXXOOXXXOOXXXXOOXOXOOXXXXXXXXXXXXXXOOOXOXOOOXXOOOXXXOOOXXOOOXOXOOOXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXOOOOXXXOOOXOXXOXXXOXOXOXXOXXXOOOXOOOOXXXXXXXXXXXXXOOOOXOOOXXXOXXOXOXOXXXOXXOXOOOXXXOOOOXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXOXXXXXXXXOOOOOXXXXXOOXOXOOXXXXOXXOXXOXXXOOOOOOOOOXXXOXXOXXOXXXXOXXOXXOXXXXOXOOOXOXXXXXXXOXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXOXOXOXXXXXXOXOXXXXXXXXOXOXOXOOOXXXXXXOXXXOXXOOOOOOOOOXXOXXXOXXXXXXOOOXOXOXOXXXXXXXXOXOXXXXXXOXOXOXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXOXXXXXOXXXOOOXXXOOOXXXXXXXXXXXXXOOOOOOOOOXXOXXXOXXXOXXOXOOOOOXOXXOXOXXXOXOXXOXOXXXOXOXXXXXXXXXXXX", "XXXXXXXXXXXXOOOXXXOOOXXOOOXXXOOOXXOOOOOOOOOXXOOOXXXOOOXXXXXXXXXXXXXOOOXXXOOOXXOOOOOOOOOXXOOOXXXOOOXXOOOXXXOOOXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXOOOOOXXXXXXXXXXXXXXXOOOXOXOOOXXXXXXXXXXXXXXOOOXOOOXXXXXXOXOXXXXXOOOOXOOOOXXXXXXXXXXXX", "XXXXXXXXXXXXOOOOOXXOOXXOXXXXOOXOXXOXXXXXXOXXXOXXOOOXOXXXOXXOXOXXOXXXOXOOOXXOXXXOXXXXXXOXXOXOOXXXXOXXOOXXOOOOOXXXXXXXXXXXX", "XXXXXXXXXXXXOXXOXXOOOXXOXOXXOXXXXXOXOXOXXOOXXOXOXOXOXXXXOXOXOXOXOXXOXOXOXOXXXXOXOXOXXOOXXOXOXXOXXXXXOXXOXXOOOXXXXXXXXXXXX", "XXXXXXXXXXXXOOOXXOXXOXXXXXOXXOXOXXOOXXOXOXOXXXXOXOXOXOXXOXOXOXOXOXXXXOXOXOXOXXOOXXOXOXOXXXXXOXXOXOXXOOOXXOXXOXXXXXXXXXXXX" } },
        { "Grey", new[] { "XXXXXXXXXXXXOOOOOOOOOXXXXXXOXXXOXXXXXXOXXXOXXXXXXOXXXOXXXXXXOXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXXX", "XXXXXXXXXXXXOOOOOOOOOXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXOOOOOXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXOOOOOXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXOOOOOOOOOXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXOOOOOXXXXXXXXXXOXXXXXXOOOOOXXXXXXXXXXOXXXXXXOOOOOXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXOXXXOXXXOXXOXXXOXXXOXXOXXXOXXXOXXOXXXOXXXOXXOOOOOOOOOXXXXXXXXXXXX", "XXXXXXXXXXXXOXXXXXXXOXXOXXXXXXXOXXOXXXXXXXOXXOXXXXXXXOXXOXXXXXXXOXXOXXXXXXXOXXOXXXXXXXOXXOXXXXXXXOXXOXXXXXXXOXXXXXXXXXXXX", "XXXXXXXXXXXXOOOOOOOOOXXXXXXXXXXOXXXXOXXXOXOXXXXOXXXOXOXXOOOOOOOOOXXOXOXXXOXOXXOXOXXXOXOXXOXXXXXXXOXXOXXXXXXXOXXXXXXXXXXXX", "XXXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXOXXOXXXXXXXOXXOXXXXXXXOXXOXXXXXXXOXXOOOOOOOOOXXXXXXXXXXXX", "XXXXXXXXXXXXOXXXXXXXOXXOXXXXXXXOXXOXXXXXXXOXXOXXXXXXXOXXOXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXOOOOOOOOOXXXXXXXXXXXX", "XXXXXXXXXXXXOOOOOOOOOXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXOOOOOOOOOXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXOOOOOOOOOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXOOOOOOOOOXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXOOOOOOOOOXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXOXXXOXXXXOXOXXXOXXXXOOOOOOOOOXXOXOXXXOXXXXOXOXXXOXXXXOXXXXXXXXXXOXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXOXOXOXXXXXXOXOXOXXXXXXOXOXOXXXXXXXXXXOXXXXXXOOOOOXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOOOOOOOOOXXOXXXXXXXOXXOXXXXXXXOXXOXXXXXXXOXXOXXXXXXXOXXXXXXXXXXXX", "XXXXXXXXXXXXOOOOOOOOOXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXOOOOOOOOOXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXOXOXOXXXXXXOXOXOXXXXOOOOOOOOOXXXXOXOXOXOXXXXOXOXOXOXXXXXXOXXXOXXXXXXOXXXOXXXXXXXXXXXX", "XXXXXXXXXXXXOOOOOOOOOXXXXXXXXXXXXXXXOXXXOXXXXXXOXXXOXXXXOOOOOOOOOXXXXOXOXOXXXXXXOXOXOXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXOOOOOOOOOXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXOOOOOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOOOOOXXXXXXXXXXXX", "XXXXXXXXXXXXOOOOOOOOOXXOXXXOXXXOXXOXXXOXXXOXXOXXXOXXXOXXOOOOOXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXXX", "XXXXXXXXXXXXOOOOOXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXOOOOOOOOOXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXOOOOOOOOOXXXXXXXXXXXX", "XXXXXXXXXXXXOOOOOOOOOXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXOOOOOOOOOXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXOOOOOOOOOXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXOOOOOOOOOXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXOOOOOOOOOXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXOOOOOOOOOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXOOOOOOOOOXXOXXXXXXXOXXOXXXXXXXOXXOXXXXXXXOXXOXXXXXXXOXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXOOOOOOOOOXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXOOOOOOOOOXXXXXXXXXXXX", "XXXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOOOOOOOOOXXXXXXXXXXXX", "XXXXXXXXXXXXOOOOOOOOOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXOOOOOOOOOXXOXXXXXXXOXXOXXXXXXXOXXOXXXXXXXOXXOXXXXXXXOXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXOXOXOXXXXXXOXOXOXXXXOOOOOOOOOXXXXOXOXOXXXXXXOXOXOXXXXXXXXOXXXXXXOOOOOOOOOXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXOOOOOOOOOXXXXXXOXXXOXXXXXXOXXXOXXXXXXOXXXOXXXXXXOXXXOXXXXXXXXXXXX", "XXXXXXXXXXXXOOOOOXXXOXXXXXXXXXXOXXXXOXXXOXOXXXXOXXXOXOXXOOOOOXOXOXXXXOXXXOXOXXXXOXXXOXOXXXXXXXXXXOXXOOOOOOOOOXXXXXXXXXXXX", "XXXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOOOOOOOOOXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXOXOXOXXXXXXOXOXOXXXXOXOXOXOXOXXOXOXOXOXOXXOXOXOXOXOXXOXXXOXXXOXXOOOOOOOOOXXXXXXXXXXXX", "XXXXXXXXXXXXOOOOOOOOOXXXXXXXXXXOXXXXOXXXOXOXXXXOXXXOXOXXXXOXXXOXOXXXXOXXXOXOXXXXOXXXOXOXXXXXXXXXXOXXOOOOOOOOOXXXXXXXXXXXX", "XXXXXXXXXXXXOOOOOOOOOXXOXXXOXXXOXXOXOXOXOXOXXOXOXOXOXOXXOOOOOXOXOXXXXOXXXOXOXXXXOXXXOXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXOOOOOOOOOXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXOOOOOXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOXXXXXXXXXXOOOOOOOOOXXOXXXOXXXXXXOXXXOXXXXXXOXXXOXXXXXXOXXXOXXXXXXXXXXXXXXXX" } }
    };

    string[] colorNames;
    int[] usedColors = new int[8];
    int[] unusedColors = new int[8];
    bool[,] unusedMap = new bool[4, 4];
    int[] stageColors = new int[3];
    int nowStage;
    string nowPattern = "";
    readonly int[] intPatterns = new int[3];
    readonly string[] correctPatterns = new string[3];
    readonly bool[] clearedStage = new bool[3];
    string serialNumber = "";
    IEnumerable<int> serialDigits;

    string dragStateVal;
    bool dragging;
    bool beatStage;

    bool moduleSolved;
    static int moduleIdCounter = 1;
    int moduleId;

    void Start() {
        moduleId = moduleIdCounter++;
        patternColors = new[,] {
            { "#6C190E".Color(), "#6C3610".Color(), "#68530F".Color(), "#555F0D".Color(), "#335C0E".Color(), "#0C580D".Color(), "#0A5C30".Color(), "#0A5D55".Color(), "#0A5169".Color(), "#0C3368".Color(), "#101669".Color(), "#351A69".Color(), "#591C67".Color(), "#6D1D56".Color(), "#6B1B33".Color(), "#424242".Color() },
            { "#FF4E41".Color(), "#FF8F31".Color(), "#FFD232".Color(), "#DBEF30".Color(), "#85E836".Color(), "#2EE235".Color(), "#2EE38E".Color(), "#2BEDD1".Color(), "#2ECEFF".Color(), "#3888FF".Color(), "#3848FF".Color(), "#8E4FFF".Color(), "#DA53F3".Color(), "#FD55E2".Color(), "#FE5388".Color(), "#A9A9A9".Color() }
        };

        colorNames = patterns.Keys.ToArray();
        usedColors = Enumerable.Range(0, patternColors.GetLength(1)).ToArray().Shuffle().Take(8).ToArray();
        unusedColors = Enumerable.Range(0, patternColors.GetLength(1)).Where(x => !usedColors.Contains(x)).ToArray();
        unusedMap = Enumerable.Range(0, patternColors.GetLength(1)).Select(x => !usedColors.Contains(x)).ToArray().ToArray2D(4, 4);
        stageColors = usedColors.Shuffle().Take(3).ToArray();
        Debug.LogFormat(@"[Wavetapping #{0}] Possible colors are: {1}", moduleId, usedColors.Select(x => colorNames[x]).Join(", "));
        Debug.LogFormat(@"[Wavetapping #{0}] Stage colors are: {1}", moduleId, stageColors.Select(x => colorNames[x]).Join(", "));

        for (var i = 0; i < ColorDisplays.Length; i++)
            ColorDisplays[i].material.color = (usedColors.Contains(i)) ? "#DDDDDD".Color() : patternColors[0, i];

        serialNumber = BombInfo.GetSerialNumber();
        serialDigits = BombInfo.GetSerialNumberNumbers();

        if (BombInfo.GetSerialNumberLetters().Count("SRFMU".Contains) >= 3) {
            Debug.LogFormat(@"[Wavetapping #{0}] Rotating the patterns 180 degrees.", moduleId);

            for (var i = 0; i < colorNames.Length; i++)
                patterns[colorNames[i]] = patterns[colorNames[i]].Select(x => x.Reverse()).ToArray();
        }

        GetCorrects();
        StartStage();
        StartCoroutine(PixelBlink());

        SubmitButton.OnInteract += delegate() {
            OnSubmitPress();

            return false;
        };

        for (var i = 0; i < ModuleButtons.Length; i++) {
            var j = i;

            ModuleButtons[i].OnInteract += delegate() {
                dragStateVal = nowPattern[j] == 'O' ? "X" : "O";
                ModuleButtons[j].AddInteractionPunch(0.2f);
                OnButtonPress(j);
                dragging = true;
                return false;
            };

            ModuleButtons[i].OnInteractEnded += delegate() { dragging = false; };

            ModuleButtons[i].OnHighlight += delegate() {
                if (dragging) {
                    OnButtonPress(j);
                }
            };
        }
    }

    string Rotate(string pattern) {
        var input = pattern.ToStringArray().ToArray2D(11, 11);
        var output = "";

        for (var i = 0; i < input.GetLength(1); i++) {
            for (var j = 0; j < input.GetLength(0); j++) {
                output += input[j, i];
            }
        }

        return output;
    }

    void StartStage() {
        if (clearedStage[nowStage]) {
            for (var i = 0; i < ModuleButtons.Length; i++) {
                nowPattern = nowPattern.Remove(i, 1);
                nowPattern = nowPattern.Insert(i, correctPatterns[nowStage][i].Equals('O') ? "O" : "X");
                ModuleButtons[i].GetComponent<Renderer>().material.color = patternColors[nowPattern[i].Equals('O').ToInt(), stageColors[nowStage]];
            }
        } else {
            for (var i = 0; i < ModuleButtons.Length; i++)
                ModuleButtons[i].GetComponent<Renderer>().material.color = patternColors[0, stageColors[nowStage]];

            nowPattern = Enumerable.Repeat("X", 121).Join("");
        }

        DisplayPixel.transform.localPosition = new Vector3(0.0456f + (0.01f * (stageColors[nowStage] % 4)), 0.0165f, -0.0103f - (0.01f * (stageColors[nowStage] / 4)));
    }

    IEnumerator PixelBlink() {
        while (!moduleSolved) {
            DisplayPixel.SetActive(false);

            yield return new WaitForSeconds(0.5f);

            DisplayPixel.SetActive(true);

            yield return new WaitForSeconds(0.5f);
        }

        DisplayPixel.SetActive(true);
    }

    IEnumerator StageBlink(string shape, int stage) {
        for (var i = 0; i < 5; i++) {
            var nowShape = (i.IsEven()) ? shape : Enumerable.Repeat("X", 121).Join("");

            for (var j = 0; j < ModuleButtons.Length; j++)
                ModuleButtons[j].GetComponent<Renderer>().material.color = patternColors[(nowShape[j].Equals('O')).ToInt(), stageColors[stage]];

            yield return new WaitForSeconds(0.2f);
        }

        beatStage = false;
        StartStage();
    }

    IEnumerator EndBlink() {
        var endPatterns = patterns["Purple"].Slice(11, 2).ToArray();
        var flashTimes = (9 * 2) + 2;

        for (var i = 0; i < flashTimes; i++) {
            var shape = "";

            if (i.IsEven()) {
                if (i != flashTimes - 2) {
                    shape = endPatterns[0];
                    BombAudio.PlaySoundAtTransform("snd_solved", transform);
                } else {
                    shape = endPatterns[1];
                    BombAudio.PlaySoundAtTransform("snd_solved2", transform);
                }
            } else {
                shape = Enumerable.Repeat("X", 121).Join("");
            }

            for (var j = 0; j < ModuleButtons.Length; j++)
                ModuleButtons[j].GetComponent<Renderer>().material.color = patternColors[(shape[j].Equals('O')).ToInt(), stageColors[nowStage]];

            if (i != flashTimes - 2) {
                if (i.IsEven()) {
                    yield return new WaitForSeconds(0.2f);
                } else {
                    yield return new WaitForSeconds(0.09f);
                }
            } else {
                yield return new WaitForSeconds(0.5f);
            }
        }

        beatStage = false;
    }

    void GetCorrects() {
        for (var i = 0; i < 3; i++) {
            var nowColor = colorNames[stageColors[i]];
            intPatterns[i] = ReturnPattern(nowColor, i);
            Debug.LogFormat(@"[Wavetapping #{0}] Correct pattern for stage {1} is: {2}", moduleId, i + 1, intPatterns[i] + 1);
            correctPatterns[i] = patterns[nowColor][intPatterns[i]];
            LogPatterns(correctPatterns[i]);
        }
    }

    int ReturnPattern(string checkColor, int stage) {
        switch (checkColor) {
            case "Red": return InRange((NonZero(BombInfo.GetBatteryCount()) * NonZero(BombInfo.GetIndicators().Count())), stage);
            case "Orange": return InRange(((stage + 1) * NonZero(serialDigits.Last())), stage);
            case "Orange-Yellow": return (!serialDigits.Sum().IsEven()) ? stage : 2 - stage;

            case "Chartreuse":
                var leftCount = unusedMap.GetCol(0).Concat(unusedMap.GetCol(1)).Count(x => x == true);
                var rightCount = unusedMap.GetCol(2).Concat(unusedMap.GetCol(3)).Count(x => x == true);

                if (leftCount == rightCount) {
                    return (!BombInfo.GetPortPlateCount().IsEven()).ToInt();
                } else {
                    return (leftCount < rightCount).ToInt();
                }

            case "Lime":
                var countD = BombInfo.GetBatteryCount(Battery.D);
                var countAA = BombInfo.GetBatteryCount(Battery.AA) + BombInfo.GetBatteryCount(Battery.AAx3) + BombInfo.GetBatteryCount(Battery.AAx4);

                if (countD == countAA) {
                    return (serialDigits.First().IsEven()).ToInt();
                } else {
                    if (stage != 0 && patterns[colorNames[stageColors[stage - 1]]].Length <= 3)
                        return (countD > countAA).ToInt();

                    return (countD < countAA).ToInt();
                }

            case "Green":
                if (stage != 0) {
                    return InRange(correctPatterns[stage - 1].Count(x => x.Equals('O')), stage);
                } else {
                    return InRange(patterns[colorNames[unusedColors.First()]].First().Count(x => x.Equals('O')), stage);
                }

            case "Seafoam Green":
                var upCount = unusedMap.GetRow(0).Concat(unusedMap.GetRow(1)).Count(x => x == true);
                var downCount = unusedMap.GetRow(2).Concat(unusedMap.GetRow(3)).Count(x => x == true);

                if (upCount == downCount) {
                    return (BombInfo.GetOnIndicators().Count().IsEven()).ToInt();
                } else {
                    return (upCount < downCount).ToInt();
                }

            case "Cyan-Green":
                var firstDigit = serialDigits.First();
                var lastDigit = serialDigits.Last();

                return ((firstDigit.IsEven() ^ lastDigit.IsEven()) ? lastDigit.IsEven() : firstDigit.IsEven()).ToInt();

            case "Turquoise": return InRange(NonZero(BombInfo.GetPortPlateCount()) * NonZero(BombInfo.GetIndicators().Select(x => (x.Equals("BOB")) ? 5 : (BombInfo.IsIndicatorOn(x)) ? 2 : 1).Sum()), stage);
            case "Dark Blue": return InRange(BombInfo.GetSolvableModuleNames().Count(x => x.Equals("Wavetapping")), stage);

            case "Indigo":
                var nowSum = 0;

                if (stage != 0) {
                    nowSum = Enumerable.Range(1, stage).Select(x => Array.IndexOf(patterns[colorNames[stageColors[stage - x]]], correctPatterns[stage - x]) + 1).Sum();
                } else {
                    nowSum = serialDigits.Sum();
                }

                return InRange(nowSum * BombInfo.GetModuleNames().Count, stage);

            case "Purple":
                var sequence = new[] { 1, 7, 2, 7, 8, 6, 3, 2, 6, 4, 6, 4, 9, 10, 10, 10, 10, 10, 1, 7, 2, 7, 8, 3, 3, 3, 5, 4, 6, 4, 9, 10, 10, 10, 10, 10, 1, 7, 2, 7, 8, 5, 2, 6, 4, 8, 2, 4, 3, 10, 10, 10, 10, 10, 1, 7, 2, 7, 8, 8, 4, 3, 3, 3, 7, 4, 7, 3, 3, 6, 7, 8, 6, 3, 3, 7, 7, 8, 2, 6, 3, 4, 6, 4, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13 };

                return sequence[InRange(serialNumber.Select(x => A1Z26(x)).Sum() * NonZero(BombInfo.GetBatteryCount(), 13), 95, 0)] - 1;

            case "Purple-Magenta":
                if (stage == 0) {
                    return 0;
                } else {
                    var firstSection = new[] { "Red", "Orange", "Orange-Yellow", "Chartreuse", "Lime", "Green", "Seafoam Green", "Cyan-Green", "Dark Blue", "Purple-Magenta" };
                    var lowerHalf = patterns[colorNames[stageColors[stage - 1]]].Take((int)Math.Ceiling((double)patterns[colorNames[stageColors[stage - 1]]].Length / 2));

                    if (firstSection.Contains(colorNames[stageColors[stage - 1]])) {
                        return (lowerHalf.Contains(correctPatterns[stage - 1])) ? 0 : 2;
                    } else {
                        return (lowerHalf.Contains(correctPatterns[stage - 1])) ? 1 : 3;
                    }
                }

            case "Magenta":
                var charSum = serialNumber.Take(3).Select(x => A1Z26(x)).Sum() * serialNumber.Skip(3).Select(x => A1Z26(x)).Sum();

                if (charSum > 2222)
                    patterns["Magenta"] = patterns["Magenta"].Select(x => Rotate(x)).ToArray();

                return InRange(NonZero(charSum, 8), stage);

            case "Pink":
                var digitsNum = int.Parse(serialDigits.Join(""));

                if (digitsNum == 0) {
                    if (stage == 0) {
                        return InRange(A1Z26(BombInfo.GetSerialNumberLetters().First()), stage);
                    } else {
                        return InRange(Array.IndexOf(patterns[colorNames[stageColors[stage - 1]]], correctPatterns[stage - 1]) + 1, stage);
                    }
                } else {
                    return InRange(digitsNum, stage);
                }

            case "Grey": return InRange(unusedColors.Select(x => patterns[colorNames[x]].Length).Sum(), stage);
        }

        return 0;
    }

    int A1Z26(char nowChar) { return (char.IsDigit(nowChar)) ? int.Parse(nowChar.ToString()) : (nowChar - 'A') + 1; }
    int NonZero(int checking, int amount = 1) { return (checking > 0) ? checking : amount; }

    int InRange(int ranging, int stage) {
        var length = patterns[colorNames[stageColors[stage]]].Length;

        while (!ranging.IsInRange(0, length))
            ranging -= length;

        return (ranging > 0) ? ranging - 1 : ranging;
    }

    int InRange(int ranging, int length, int placeholder = 0) {
        while (!ranging.IsInRange(0, length))
            ranging -= length;

        return (ranging > 0) ? ranging - 1 : ranging;
    } 

    void LogPatterns(string pattern) {
        pattern = pattern.Replace('O', '0');

        for (var i = 0; i < 11; i++)
            Debug.LogFormat(@"[Wavetapping #{0}] {1}", moduleId, pattern.Skip(11 * i).Take(11).Join(""));
    }

    void OnSubmitPress() {
        BombAudio.PlayGameSoundAtTransform(KMSoundOverride.SoundEffect.ButtonPress, SubmitButton.transform);
        SubmitButton.AddInteractionPunch(0.5f);

        if (moduleSolved || beatStage) return;

        var prevStage = nowStage;

        if (nowPattern.Equals(correctPatterns[nowStage++])) {
            clearedStage[prevStage] = true;
            Debug.LogFormat(@"[Wavetapping #{0}] Pattern was correct!", moduleId);

            if (nowStage >= 3) {
                BombModule.HandlePass();
                moduleSolved = true;
                Debug.LogFormat(@"[Wavetapping #{0}] Module solved!", moduleId);
                nowStage = 2;
            }
        } else {
            BombModule.HandleStrike();
            var findPattern = Array.IndexOf(patterns[colorNames[stageColors[prevStage]]], nowPattern);

            if (findPattern == -1) {
                Debug.LogFormat(@"[Wavetapping #{0}] Pattern doesn't match with any other pattern of that color.", moduleId);
            } else {
                Debug.LogFormat(@"[Wavetapping #{0}] You submited pattern {1} when the correct pattern was {2}.", moduleId, findPattern + 1, Array.IndexOf(patterns[colorNames[stageColors[prevStage]]], correctPatterns[prevStage]) + 1);
            }

            Debug.LogFormat(@"[Wavetapping #{0}] Submitted pattern:", moduleId);
            LogPatterns(nowPattern);
            nowStage = 0;
        }

        beatStage = true;

        if (nowStage != 0 && prevStage == 2) {
            StartCoroutine(EndBlink());
        } else {
            StartCoroutine(StageBlink((nowStage == 0) ? patterns["Purple"][9] : "XXXXXXXXXXXXXXXXXXXXOXXXXXXXXXOOXXXXXXXXOOOXXXXXXXOOOXXXXXXXOOOXXXXOOXOOOXXXXXOOOOOXXXXXXXOOOXXXXXXXXXOXXXXXXXXXXXXXXXXXX", prevStage));
        }
    }

    void OnButtonPress(int buttonPressed) {
        if (beatStage) return;

        var compRend = ModuleButtons[buttonPressed].GetComponent<Renderer>();
        compRend.material.color = patternColors[dragStateVal == "X" ? 0 : 1, stageColors[nowStage]];
        nowPattern = nowPattern.Remove(buttonPressed, 1);
        nowPattern = nowPattern.Insert(buttonPressed, dragStateVal);
    }

#pragma warning disable 414
    private readonly string TwitchHelpMessage = @"!{0} press A1 B39 C123... (column [A to I] and row [1 to 9] to press [not counting the edges so A1 will be considered as B2 on the grid] [you can input multiple rows in the same column]) | !{0} submit/sub/s (submits current pattern)";
#pragma warning restore 414

    KMSelectable[] ProcessTwitchCommand(string command) {
        command = command.ToLowerInvariant().Trim();

        if (Regex.IsMatch(command, @"^press +[a-i1-9^, |&]+$")) {
            command = command.Substring(6).Trim();

            var presses = command.Split(new[] { ',', ' ', '|', '&' }, StringSplitOptions.RemoveEmptyEntries);
            var pressList = new List<KMSelectable>();

            for (var i = 0; i < presses.Length; i++) {
                if (Regex.IsMatch(presses[i], @"^[a-i][1-9]{1,9}$")) {
                    var setCol = presses[i][0] - 'a' + 1;

                    for (var j = 0; j < presses[i].Length - 1; j++) {
                        var setPress = setCol + (11 * (presses[i][j + 1] - '1' + 1));
                        pressList.Add(ModuleButtons[setPress]);
                    }
                }
            }

            return (pressList.Count > 0) ? pressList.ToArray() : null;
        }

        return (Regex.IsMatch(command, @"^\s*(submit|sub|s)\s*$")) ? new[] { SubmitButton } : null;
    }
}